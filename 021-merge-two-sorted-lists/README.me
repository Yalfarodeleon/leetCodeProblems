# LeetCode Problem #021 - [Merge Two Sorted Lists]

**Difficulty:** [Easy]  
**Link:** [LeetCode URL](https://leetcode.com/problems/merge-two-sorted-lists/)

---

## 📝 Problem

> You are given the heads of two sorted linked lists `list1` and `list2`.  
> Merge the two lists into one **sorted** linked list.  
> The list should be made by **splicing together the nodes** of the first two lists.  
> Return the head of the merged linked list.

**Example 1:**

Input: `list1 = [1,2,4]`, `list2 = [1,3,4]`  
Output: `[1,1,2,3,4,4]`

**Example 2:**

Input: `list1 = []`, `list2 = []`  
Output: `[]`

**Example 3:**

Input: `list1 = []`, `list2 = [0]`  
Output: `[0]`

**Constraints:**

- The number of nodes in both lists is in the range `[0, 50]`.
- `-100 <= Node.val <= 100`
- Both `list1` and `list2` are **sorted** in non-decreasing order.

---

## 💡 Approach

- Use **pointers** to iterate through both input linked lists.
- At each step, compare the current nodes of both lists:
  - Append the **smaller node** to the merged list.
  - Move the pointer of the list from which the node was taken.
- Continue until one of the lists is exhausted, then **append the remaining nodes** of the other list.
- Consider both **iterative** and **recursive** solutions.
- Focus on **in-place merging** using the original nodes to reduce memory usage.

---

## 🔍 Time and Space Complexity

| Metric | Complexity | Notes |
|--------|------------|-------|
| 🕒 Time   | O(n + m)   | Where `n` and `m` are the lengths of `list1` and `list2` |
| 🧠 Space  | O(1)       | If done in-place (ignoring recursive call stack if using recursion) |

---

## ✅ Test Cases

| list1        | list2        | Output             |
|--------------|--------------|--------------------|
| `[1,2,4]`     | `[1,3,4]`     | `[1,1,2,3,4,4]`     |
| `[]`         | `[]`         | `[]`               |
| `[]`         | `[0]`        | `[0]`              |
| `[5,10]`     | `[2,3,4,11]` | `[2,3,4,5,10,11]`   |

---

## 🧠 Notes & Learnings

- Refreshed my understanding of **linked list traversal**.
- Practiced comparing and merging two sorted lists **node by node**.
- Learned the difference between creating a **new list** and merging **in-place**.
- Understood how to maintain a **dummy node** or **head reference** to simplify pointer manipulation.
- Reinforced how to handle **null/None checks** to prevent pointer errors.

---
